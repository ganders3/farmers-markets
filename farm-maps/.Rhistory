install.packages(c("tidyverse", "ggmap", "ggplot2", "mapdata", "maps"))
library(dplyr)
library(ggmap)
library(ggplot2)
library(mapdata)
library(maps)
library(dplyr)
library(ggmap)
library(ggplot2)
library(mapdata)
library(maps)
install.packages("dplyr")
library(dplyr)
library(ggmap)
library(ggplot2)
library(mapdata)
library(maps)
library(sp)
# Set-up ####
rm(list = ls())
# -------------------- controls------------------------------
DIRECTORY = '/home/gregory/farmers-markets/farm-maps'
RATIO = 1.4
API_KEY = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxx'
GEOCODED_DATA_FILE = 'farms-geocoded.csv'
# -------------------- controls------------------------------
setwd(DIRECTORY)
# Get coordinates of farm addresses ####
d = read.csv('farms.csv', header = TRUE)
# colnames(d) = c('Name', 'Address', 'Category')
if (file.exists(GEOCODED_DATA_FILE)) {
print('Geocoded file found.')
d1 = read.csv(GEOCODED_DATA_FILE, header = TRUE)
} else {
print('No file found. Geocoding addresses using Google Maps API...')
# Geocode the addresses using Google Maps API
d1 = mutate_geocode(d, location = address, output = 'latlona')
write.csv(d1, 'farms-geocoded.csv')
}
# Display the entries that did not return anything from Google Maps
failed = d1[which(is.na(d1$lon)), ]
# Save the geocoded data to csv
# Create map of Washington ####
m = map_data('state', region = 'Washington')
gg = ggplot() +
geom_polygon(
data = m,
aes(x = long, y = lat, group = group),
fill = 'white',
color = 'black'
) +
coord_fixed(RATIO)
# Add farm locations to map
for (yr in 2019:2021) {
present = d1 %>% select(paste0('present', yr))
dataToPlot = d1[which(present == 1), ]
# png(paste0('market-map-', yr, '.png'))
## Need to wrap this line in print() in order to output ggplots within a for loop
print(gg +
geom_point(data  = dataToPlot, aes(x = lon, y = lat), color = 'red', size = 1) +
labs(title = print(yr)))
# dev.off()
}
?save.image()
library(dplyr)
library(ggmap)
library(ggplot2)
library(mapdata)
library(maps)
library(sp)
# Set-up ####
rm(list = ls())
# -------------------- controls------------------------------
DIRECTORY = '/home/gregory/farmers-markets/farm-maps'
RATIO = 1.4
WIDTH = 834
HEIGHT = 551
API_KEY = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxx'
GEOCODED_DATA_FILE = 'farms-geocoded.csv'
# -------------------- controls------------------------------
setwd(DIRECTORY)
# Get coordinates of farm addresses ####
d = read.csv('farms.csv', header = TRUE)
# colnames(d) = c('Name', 'Address', 'Category')
if (file.exists(GEOCODED_DATA_FILE)) {
print('Geocoded file found.')
d1 = read.csv(GEOCODED_DATA_FILE, header = TRUE)
} else {
print('No file found. Geocoding addresses using Google Maps API...')
# Geocode the addresses using Google Maps API
d1 = mutate_geocode(d, location = address, output = 'latlona')
write.csv(d1, 'farms-geocoded.csv')
}
# Display the entries that did not return anything from Google Maps
failed = d1[which(is.na(d1$lon)), ]
# Save the geocoded data to csv
# Create map of Washington ####
m = map_data('state', region = 'Washington')
gg = ggplot() +
geom_polygon(
data = m,
aes(x = long, y = lat, group = group),
fill = 'white',
color = 'black'
) +
coord_fixed(RATIO)
# Add farm locations to map
for (yr in 2019:2021) {
present = d1 %>% select(paste0('present', yr))
dataToPlot = d1[which(present == 1), ]
png(paste0('market-map-', yr, '.png'), width = WIDTH, height = HEIGHT)
## Need to wrap this line in print() in order to output ggplots within a for loop
print(gg +
geom_point(data  = dataToPlot, aes(x = lon, y = lat), color = 'red', size = 1) +
labs(title = print(yr)))
# dev.off()
}
dev.off()
library(dplyr)
library(ggmap)
library(ggplot2)
library(mapdata)
library(maps)
library(sp)
# Set-up ####
rm(list = ls())
# -------------------- controls------------------------------
DIRECTORY = '/home/gregory/farmers-markets/farm-maps'
RATIO = 1.4
WIDTH = 834
HEIGHT = 551
API_KEY = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxx'
GEOCODED_DATA_FILE = 'farms-geocoded.csv'
# -------------------- controls------------------------------
setwd(DIRECTORY)
# Get coordinates of farm addresses ####
d = read.csv('farms.csv', header = TRUE)
# colnames(d) = c('Name', 'Address', 'Category')
if (file.exists(GEOCODED_DATA_FILE)) {
print('Geocoded file found.')
d1 = read.csv(GEOCODED_DATA_FILE, header = TRUE)
} else {
print('No file found. Geocoding addresses using Google Maps API...')
# Geocode the addresses using Google Maps API
d1 = mutate_geocode(d, location = address, output = 'latlona')
write.csv(d1, 'farms-geocoded.csv')
}
# Display the entries that did not return anything from Google Maps
failed = d1[which(is.na(d1$lon)), ]
# Save the geocoded data to csv
# Create map of Washington ####
m = map_data('state', region = 'Washington')
gg = ggplot() +
geom_polygon(
data = m,
aes(x = long, y = lat, group = group),
fill = 'white',
color = 'black'
) +
coord_fixed(RATIO)
# Add farm locations to map
for (yr in 2019:2021) {
present = d1 %>% select(paste0('present', yr))
dataToPlot = d1[which(present == 1), ]
png(paste0('market-map-', yr, '.png'), width = WIDTH, height = HEIGHT)
## Need to wrap this line in print() in order to output ggplots within a for loop
print(gg +
geom_point(data  = dataToPlot, aes(x = lon, y = lat), color = 'red', size = 1) +
labs(title = print(yr)))
# dev.off()
dev.off()
}
library(dplyr)
library(ggmap)
library(ggplot2)
library(mapdata)
library(maps)
library(sp)
# Set-up ####
rm(list = ls())
# -------------------- controls------------------------------
DIRECTORY = '/home/gregory/farmers-markets/farm-maps'
RATIO = 1.4
API_KEY = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxx'
GEOCODED_DATA_FILE = 'farms-geocoded.csv'
IMG_WIDTH = 834
IMG_HEIGHT = 551
IMG_SCALE = 1.5
# -------------------- controls------------------------------
setwd(DIRECTORY)
# Get coordinates of farm addresses ####
d = read.csv('farms.csv', header = TRUE)
# colnames(d) = c('Name', 'Address', 'Category')
if (file.exists(GEOCODED_DATA_FILE)) {
print('Geocoded file found.')
d1 = read.csv(GEOCODED_DATA_FILE, header = TRUE)
} else {
print('No file found. Geocoding addresses using Google Maps API...')
# Geocode the addresses using Google Maps API
d1 = mutate_geocode(d, location = address, output = 'latlona')
write.csv(d1, 'farms-geocoded.csv')
}
# Display the entries that did not return anything from Google Maps
failed = d1[which(is.na(d1$lon)), ]
# Save the geocoded data to csv
# Create map of Washington ####
m = map_data('state', region = 'Washington')
gg = ggplot() +
geom_polygon(
data = m,
aes(x = long, y = lat, group = group),
fill = 'white',
color = 'black'
) +
coord_fixed(RATIO)
# Add farm locations to map
for (yr in 2019:2021) {
present = d1 %>% select(paste0('present', yr))
dataToPlot = d1[which(present == 1), ]
png(paste0('market-map-', yr, '.png'), width = IMG_SCALE*IMG_WIDTH, height = IMG_SCALE*IMG_HEIGHT)
## Need to wrap this line in print() in order to output ggplots within a for loop
print(gg +
geom_point(data  = dataToPlot, aes(x = lon, y = lat), color = 'red', size = 1) +
labs(title = print(yr)))
# dev.off()
dev.off()
}
?geom_point
library(dplyr)
library(ggmap)
library(ggplot2)
library(mapdata)
library(maps)
library(sp)
# Set-up ####
rm(list = ls())
# -------------------- controls------------------------------
DIRECTORY = '/home/gregory/farmers-markets/farm-maps'
ICONS_FOLDER = 'icons'
RATIO = 1.4
API_KEY = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxx'
GEOCODED_DATA_FILE = 'farms-geocoded.csv'
IMG_WIDTH = 834
IMG_HEIGHT = 551
IMG_SCALE = 1.5
# -------------------- controls------------------------------
setwd(DIRECTORY)
# Get coordinates of farm addresses ####
d = read.csv('farms.csv', header = TRUE)
# colnames(d) = c('Name', 'Address', 'Category')
if (file.exists(GEOCODED_DATA_FILE)) {
print('Geocoded file found.')
d1 = read.csv(GEOCODED_DATA_FILE, header = TRUE)
} else {
print('No file found. Geocoding addresses using Google Maps API...')
# Geocode the addresses using Google Maps API
d1 = mutate_geocode(d, location = address, output = 'latlona')
write.csv(d1, 'farms-geocoded.csv')
}
# Display the entries that did not return anything from Google Maps
failed = d1[which(is.na(d1$lon)), ]
# Save the geocoded data to csv
# Create map of Washington ####
m = map_data('state', region = 'Washington')
gg = ggplot() +
geom_polygon(
data = m,
aes(x = long, y = lat, group = group),
fill = 'white',
color = 'black'
) +
coord_fixed(RATIO)
# Add farm locations to map
for (yr in 2019:2021) {
present = d1 %>% select(paste0('present', yr))
dataToPlot = d1[which(present == 1), ]
png(paste0('market-map-', yr, '.png'), width = IMG_SCALE*IMG_WIDTH, height = IMG_SCALE*IMG_HEIGHT)
## Need to wrap this line in print() in order to output ggplots within a for loop
print(gg +
geom_point(data  = dataToPlot, aes(x = lon, y = lat), color = 'red', alpha = 0.05, size = 1) +
labs(title = print(yr)))
dev.off()
}
library(dplyr)
library(ggmap)
library(ggplot2)
library(mapdata)
library(maps)
library(sp)
# Set-up ####
rm(list = ls())
# -------------------- controls------------------------------
DIRECTORY = '/home/gregory/farmers-markets/farm-maps'
ICONS_FOLDER = 'icons'
RATIO = 1.4
API_KEY = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxx'
GEOCODED_DATA_FILE = 'farms-geocoded.csv'
IMG_WIDTH = 834
IMG_HEIGHT = 551
IMG_SCALE = 1.5
# -------------------- controls------------------------------
setwd(DIRECTORY)
# Get coordinates of farm addresses ####
d = read.csv('farms.csv', header = TRUE)
# colnames(d) = c('Name', 'Address', 'Category')
if (file.exists(GEOCODED_DATA_FILE)) {
print('Geocoded file found.')
d1 = read.csv(GEOCODED_DATA_FILE, header = TRUE)
} else {
print('No file found. Geocoding addresses using Google Maps API...')
# Geocode the addresses using Google Maps API
d1 = mutate_geocode(d, location = address, output = 'latlona')
write.csv(d1, 'farms-geocoded.csv')
}
# Display the entries that did not return anything from Google Maps
failed = d1[which(is.na(d1$lon)), ]
# Save the geocoded data to csv
# Create map of Washington ####
m = map_data('state', region = 'Washington')
gg = ggplot() +
geom_polygon(
data = m,
aes(x = long, y = lat, group = group),
fill = 'white',
color = 'black'
) +
coord_fixed(RATIO)
# Add farm locations to map
for (yr in 2019:2021) {
present = d1 %>% select(paste0('present', yr))
dataToPlot = d1[which(present == 1), ]
png(paste0('market-map-', yr, '.png'), width = IMG_SCALE*IMG_WIDTH, height = IMG_SCALE*IMG_HEIGHT)
## Need to wrap this line in print() in order to output ggplots within a for loop
print(gg +
geom_point(data  = dataToPlot, aes(x = lon, y = lat), color = 'red', alpha = 0.5, size = 1) +
labs(title = print(yr)))
dev.off()
}
library(shiny); runApp('~/Desktop/shiny.R')
runApp('~/Desktop/shiny.R')
?geom_point
?ggproto
library(ggplot2)
library(grid)
library(EBImage)
img <- readImage(system.file("img", "Rlogo.png", package = "png"))
RlogoGrob <- function(x, y, size, img) {
rasterGrob(x = x, y = y, image = img, default.units = "native", height = size,
width = size)
}
GeomRlogo <- ggproto("GeomRlogo", Geom, draw_panel = function(data, panel_scales,
coord, img, na.rm = FALSE) {
coords <- coord$transform(data, panel_scales)
ggplot2:::ggname("geom_Rlogo", RlogoGrob(coords$x, coords$y, coords$size,
img))
}, non_missing_aes = c("Rlogo", "size"), required_aes = c("x", "y"), default_aes = aes(size = 0.05),
icon = function(.) {
}, desc_params = list(), seealso = list(geom_point = GeomPoint$desc),
examples = function(.) {
})
geom_Rlogo <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE, show.legend = NA, inherit.aes = TRUE,
...) {
layer(data = data, mapping = mapping, stat = stat, geom = GeomRlogo,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, img = img, ...))
}
ggplot(mtcars, aes(wt, mpg))+geom_Rlogo()
library(EBImage)
library(ggplot2)
library(grid)
install.packages("ggimage")
library(ggimage)
install.packages("ggimage")
library(ggimage)
install.packages("ggimage")
library(ggimage)
View(d)
d1
d2 = d1 %>% mutate(img = sample(c('1')))
d2 = d1 %>% mutate(img = sample(c("https://www.r-project.org/logo/Rlogo.png",
"https://jeroenooms.github.io/images/frink.png")))
d2 = d1 %>% mutate(img = rep("https://jeroenooms.github.io/images/frink.png", 148))
View(d2)
gg +
geom_point(data  = dataToPlot, aes(x = lon, y = lat), color = 'red', alpha = 0.5, size = 1) +
labs(title = print(yr))
dev.off()
png(3)
dev.off()
dev.off()
gg +
geom_point(data  = dataToPlot, aes(x = lon, y = lat), color = 'red', alpha = 0.5, size = 1) +
labs(title = print(yr))
View(d2)
gg +
geom_point(data  = dataToPlot, aes(x = lon, y = lat), color = 'red', alpha = 0.5, size = 1) +
labs(title = print(yr)) +
geom_image(aes(image=img), size=.05)
gg +
geom_point(data  = dataToPlot, aes(x = lon, y = lat), color = 'red', alpha = 0.5, size = 1) +
labs(title = print(yr)) +
geom_image(aes(image=img))
gg +
geom_point(data  = d2, aes(x = lon, y = lat), color = 'red', alpha = 0.5, size = 1) +
labs(title = print(yr)) +
geom_image(aes(image=img))
ggplot(d, aes(x, y)) + geom_image(aes(image=image), size=.05)
View(d2)
View(d2)
ggplot(d2, aes(x = lon, y = lat)) + geom_image(aes(image=img), size=.05)
dataToPlot = dataToPlot %>% mutate(img = rep("https://jeroenooms.github.io/images/frink.png", 82))
View(dataToPlot)
?geom_image
gg = ggplot() +
geom_polygon(
data = m,
aes(x = long, y = lat, group = group),
fill = 'white',
color = 'black'
) +
coord_fixed(RATIO)
gg + ggplot(dataToPlot, aes(x = lon, y = lat)) + geom_image(aes(image = img), size = 0.05)
gg + geom_image(aes(x = lat, y = lon, image = img), size = 0.05)
gg = ggplot() +
geom_polygon(
data = m,
aes(x = long, y = lat, group = group),
fill = 'white',
color = 'black'
) +
coord_fixed(RATIO)
gg = ggplot() +
geom_polygon(
data = m,
aes(x = long, y = lat, group = group),
fill = 'white',
color = 'black'
) +
coord_fixed(RATIO)
gg + geom_image(aes(x = lat, y = lon, image = img), size = 0.05)
?geom_image
gg + geom_image(data = dataToPlot, mapping = aes(x = lat, y = lon), img = img, size = 0.05)
View(dataToPlot)
gg = ggplot() +
geom_polygon(
data = m,
aes(x = long, y = lat, group = group),
fill = 'white',
color = 'black'
) +
coord_fixed(RATIO)
gg + geom_image(data = dataToPlot, mapping = aes(x = lon, y = lat), img = img, size = 0.05)
View(dataToPlot)
View(dataToPlot)
gg = ggplot() +
geom_polygon(
data = m,
aes(x = long, y = lat, group = group),
fill = 'white',
color = 'black'
) +
coord_fixed(RATIO)
gg + geom_image(data = dataToPlot, mapping = aes(x = lon, y = lat), image = img, size = 0.05)
?geom_image
gg = ggplot() +
geom_polygon(
data = m,
aes(x = long, y = lat, group = group),
fill = 'white',
color = 'black'
) +
coord_fixed(RATIO)
gg + geom_image(data = dataToPlot, mapping = aes(x = lon, y = lat, image = img), size = 0.05)
View(d2)
